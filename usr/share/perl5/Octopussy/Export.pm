=head1 NAME

Octopussy::Export - Octopussy Export module

=cut
package Octopussy::Export;

use strict;
no strict 'refs';

use Net::FTP;
use Net::SCP;

use Octopussy;

=head1 FUNCTIONS

=head2 Using_Ftp($ftp_conf, $file)

Export file '$file' using FTP with '$ftp_conf' configuration 

=cut
sub Using_Ftp($$)
{
	my ($ftp_conf, $file) = @_;

	if (AAT::NOT_NULL($ftp_conf->{host})) 
  {
    my $ftp = Net::FTP->new($ftp_conf->{host}, Passive => 0);
    $ftp->login($ftp_conf->{user}, $ftp_conf->{pwd});
    $ftp->cwd($ftp_conf->{dir});
    $ftp->binary();
    $ftp->put($file);
  }
}

=head2 Using_Mail($mail_conf, $file)

Export file '$file' using Mail with '$mail_conf' configuration

=cut 
sub Using_Mail($$)
{
	my ($mail_conf, $file) = @_;
	
	if (AAT::NOT_NULL($mail_conf->{recipients}))
	{
		my @dests = ();
		foreach my $r (split(/,/, $mail_conf->{recipients}))
			{ push(@dests, $r); }
		AAT::SMTP::Send_Message_With_File("Octopussy", $mail_conf->{subject}, 
			"Report generated by Octopussy", $file, @dests);
	}
}

=head2 Using_Scp($scp_conf, $file)

Export file '$file' using Scp with '$scp_conf' configuration

=cut
sub Using_Scp($$)
{
	my ($scp_conf, $file) = @_;

	if (AAT::NOT_NULL($scp_conf->{host}))
  {
    my $scp = Net::SCP->new($scp_conf->{host}, $scp_conf->{user});
    $scp->scp($file, $scp_conf->{dir});
    print $scp->{errstr};
  }	
}

1;

=head1 AUTHOR

Sebastien Thebert <octo.devel@gmail.com>

=cut
