#!/usr/bin/perl -w
### BEGIN INIT INFO
# Provides:          octopussy
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/Stop Octopussy programs
### END INIT INFO

=head1 NAME

octopussy - Octopussy Main program

=head1 SYNOPSIS

octopussy {start|stop|restart|force-reload|status}
octopussy dispatcher{-start|-stop|-restart|-reload}
octopussy parser{-start|-stop|-restart} <device>
octopussy scheduler{-start|-stop|-restart} 
octopussy web{-start|-stop|-restart}

=head1 DESCRIPTION

octopussy is the main program used by the Octopussy Project 
to launch all other Octopussy programs

=cut

use strict;
use warnings;
use Readonly;

use Octopussy;

Readonly my $PROG_NAME       => 'octopussy';
Readonly my $USER            => 'octopussy';
Readonly my $APACHE2_BIN     => '/usr/sbin/apache2';
Readonly my $APACHE2_CONF    => '/etc/octopussy/apache2.conf';
Readonly my $COMMANDER       => 'octo_commander';
Readonly my $DISPATCHER      => 'octo_dispatcher';
Readonly my $PARSER          => 'octo_parser';
Readonly my $PUSHER          => 'octo_pusher';
Readonly my $RRD             => 'octo_rrd';
Readonly my $SCHEDULER       => 'octo_scheduler';
Readonly my $NICE_PUSHER     => 'nice -n 10';
Readonly my $NICE_RRD        => 'nice -n 15';
Readonly my $NICE_SCHEDULER  => 'nice -n 10';
Readonly my $KILLALL         => '/usr/bin/killall';
Readonly my $INITD_MYSQL     => '/etc/init.d/mysql';
Readonly my $INITD_SYSLOG_NG => '/etc/init.d/syslog-ng';

Readonly my $base    => Octopussy::Directory('programs');
Readonly my $dir_pid => Octopussy::Directory('running');

my $MSG_STATUS         = "$PROG_NAME %s %s.\n";
my $MSG_PARSING_STATUS = "$PROG_NAME Parsing '%s' %s.\n";

=head1 FUNCTIONS

=head2 Usage()

Prints usage for Octopussy program

=cut

sub Usage
{
  print
"Usage: /etc/init.d/$PROG_NAME {start|stop|restart|dispatcher-start|dispatcher-stop|dispatcher-restart|dispatcher-reload|parser-start|parser-stop|parser-restart|scheduler-stop|scheduler-start|scheduler-restart} <device>\n";

  return (1);
}

=head2 Commander_Start

Starts octo_commander

=cut

sub Commander_Start
{
  system "sudo -u $USER $base$COMMANDER &";
  printf $MSG_STATUS, 'Commander', 'Started';

  return (1);
}

=head2 Commander_Stop

Stops octo_commander

=cut

sub Commander_Stop
{
  `$KILLALL $COMMANDER`;
  printf $MSG_STATUS, 'Commander', 'Stopped';

  return (1);
}

=head2 Dispatcher_Start()

Starts syslog-ng that launchs octo_dispatcher

=cut

sub Dispatcher_Start
{

  #`$INITD_SYSLOG_NG start`;
  system "sudo -u $USER $base$DISPATCHER &";
  printf $MSG_STATUS, 'Dispatcher', 'Started';

  return (1);
}

=head2 Dispatcher_Stop()

Stops syslog-ng that stops octo_dispatcher

=cut

sub Dispatcher_Stop
{
  my $file_pid = "$dir_pid/octo_dispatcher.pid";
  if ( -f $file_pid )
  {
    my $pid = `cat "$file_pid"`;
    chomp $pid;
    kill USR1 => $pid;
  }

  #`$INITD_SYSLOG_NG stop`;
  printf $MSG_STATUS, 'Dispatcher', 'Stopped';

  return (1);
}

=head2 Dispatcher_Reload()

Restarts syslog-ng and octo_dispatcher

=cut

sub Dispatcher_Reload
{

  #`$INITD_SYSLOG_NG restart`;
  printf $MSG_STATUS, 'Dispatcher', 'Reloaded';

  return (1);
}

=head2 Parser_Start($device)

Starts octo_parser for device '$device' (all devices if no device specified)

=cut

sub Parser_Start
{
  my $device  = shift;
  my @devices = ();

  if ( defined $device ) { push @devices, $device; }
  else                   { @devices = Octopussy::Device::List(); }

  foreach my $d (@devices)
  {
    my $parse_status = Octopussy::Device::Parse_Status($d);
    if ( defined $parse_status )
    {
      if ( Octopussy::Device::Parse_Status($d) >= 1 )
      {    # Device Status "Started/Paused"
        system "sudo -u $USER $base$PARSER '$d' &";
        printf $MSG_PARSING_STATUS, $d, 'Started';
      }
      else
      {
        print
"$PROG_NAME Parsing status of '$d' is 'Stopped', set status to 'Paused' or 'Started' first !\n";
      }
    }
    else
    {
      print "Device $d Unknown !\n";
    }
  }

  return ( scalar @devices );
}

=head2 Parser_Stop($device)

Stops octo_parser for device '$device' (all devices if no device specified)

=cut

sub Parser_Stop
{
  my $device  = shift;
  my @devices = ();

  if ( defined $device ) { push @devices, $device; }
  else                   { @devices = Octopussy::Device::List(); }

  foreach my $d (@devices)
  {
    if ( Octopussy::Device::Parse_Status($d) >= 1 )
    {
      Octopussy::Device::Parse_Pause($d);
      printf $MSG_PARSING_STATUS, $d, 'Paused';
    }
    else
    {
      Octopussy::Device::Parse_Stop($d);
      printf $MSG_PARSING_STATUS, $d, 'Stopped';
    }
  }

  return ( scalar @devices );
}

=head2 Pusher_Start

Starts octo_pusher

=cut

sub Pusher_Start
{
  system "sudo -u $USER $NICE_PUSHER $base$PUSHER &";
  printf $MSG_STATUS, 'Pusher', 'Started';

  return (1);
}

=head2 Pusher_Stop

Stops octo_pusher

=cut

sub Pusher_Stop
{
  `$KILLALL $PUSHER`;
  printf $MSG_STATUS, 'Pusher', 'Stopped';

  return (1);
}

=head2 RRD_Start

Starts octo_rrd

=cut

sub RRD_Start
{
  system "sudo -u $USER $NICE_RRD $base$RRD &";
  printf $MSG_STATUS, 'RRD', 'Started';

  return (1);
}

=head2 RRD_Stop

Stops octo_rrd

=cut

sub RRD_Stop
{
  `$KILLALL $RRD`;
  printf $MSG_STATUS, 'RRD', 'Stopped';

  return (1);
}

=head2 Scheduler_Start

Starts octo_scheduler

=cut

sub Scheduler_Start
{
  system "sudo -u $USER $NICE_SCHEDULER $base$SCHEDULER &";
  printf $MSG_STATUS, 'Scheduler', 'Started';

  return (1);
}

=head2 Scheduler_Stop

Stops octo_scheduler

=cut

sub Scheduler_Stop
{
  `$KILLALL $SCHEDULER`;
  printf $MSG_STATUS, 'Scheduler', 'Stopped';

  return (1);
}

=head2 Web_Start

Starts Web Octopussy

=cut

sub Web_Start
{
  system "$APACHE2_BIN -f $APACHE2_CONF -k start";
  printf $MSG_STATUS, 'Web', 'Started';

  return (1);
}

=head2 Web_Stop

Stops Web Octopussy

=cut

sub Web_Stop
{
  system "$APACHE2_BIN -f $APACHE2_CONF -k stop";
  printf $MSG_STATUS, 'Web', 'Stopped';

  return (1);
}

=head2 Start()

Starts all Octopussy programs (dispatcher, mysql, parsers, scheduler & pusher)

=cut

sub Start
{

  # recreate /var/run/octopussy/ for systems that mount it on tmpfs
  Octopussy::Create_Directory($dir_pid);

  Dispatcher_Start();
  `$INITD_MYSQL restart`;
  Parser_Start();
  RRD_Start();
  Scheduler_Start();
  Pusher_Start();
  Commander_Start();
  Web_Start();

  return (1);
}

=head2 Stop()

Stops all Octopussy programs (parsers, scheduler, pusher & dispatcher)

=cut

sub Stop
{
  Web_Stop();
  Commander_Stop();
  Parser_Stop();
  RRD_Stop();
  Scheduler_Stop();
  Pusher_Stop();
  Dispatcher_Stop();
  `rm -f $dir_pid/*.{err,pid}`;

  return (1);
}

=head2 Status()

Returns Octopussy programs (dispatcher, rsyslog, scheduler) status

=cut

sub Status
{
  my %proc = Octopussy::Process_Status();
  foreach my $k ( sort keys %proc )
  {
    my $status = ( $proc{$k} != 0 ? 'Started' : 'Stopped' );
    print "  $k: $status\n";
  }

  return (1);
}

my $arg    = $ARGV[0] || '';
my $device = $ARGV[1] || undef;

if    ( $arg eq 'start' ) { Start(); }
elsif ( $arg eq 'stop' )  { Stop(); }
elsif ( ( $arg eq 'restart' ) || ( $arg eq 'force-reload' ) )
{
  Stop();
  Start();
}
elsif ( $arg eq 'status' )
{
  Status();
}
elsif ( $arg eq 'dispatcher-start' ) { Dispatcher_Start(); }
elsif ( $arg eq 'dispatcher-stop' )  { Dispatcher_Stop(); }
elsif ( $arg eq 'dispatcher-restart' )
{
  Dispatcher_Stop();
  Dispatcher_Start();
}
elsif ( $arg eq 'dispatcher-reload' ) { Dispatcher_Reload(); }
elsif ( $arg eq 'parser-start' )      { Parser_Start($device); }
elsif ( $arg eq 'parser-stop' )       { Parser_Stop($device); }
elsif ( $arg eq 'parser-restart' )
{
  Parser_Stop($device);
  Parser_Start($device);
}
elsif ( $arg eq 'pusher-start' ) { Pusher_Start(); }
elsif ( $arg eq 'pusher-stop' )  { Pusher_Stop(); }
elsif ( $arg eq 'pusher-restart' )
{
  Pusher_Stop();
  Pusher_Start();
}
elsif ( $arg eq 'scheduler-start' ) { Scheduler_Start(); }
elsif ( $arg eq 'scheduler-stop' )  { Scheduler_Stop(); }
elsif ( $arg eq 'scheduler-restart' )
{
  Scheduler_Stop();
  Scheduler_Start();
}
elsif ( $arg eq 'web-start' ) { Web_Start(); }
elsif ( $arg eq 'web-stop' )  { Web_Stop(); }
elsif ( $arg eq 'web-restart' )
{
  Web_Stop();
  Web_Start();
}
else { Usage(); }

exit 0;

=head1 AUTHOR

Sebastien Thebert <octo.devel@gmail.com>

=head1 SEE ALSO

octo_dispatcher, octo_extractor, octo_parser, octo_uparser, octo_reporter, octo_rrd, octo_scheduler

=cut
