#!/usr/bin/perl -w

=head1 NAME

octo_extractor - Octopussy Logs Extractor program

=head1 SYNOPSIS

octo_extractor --device <device> --service <service> --taxonomy <taxonomy>
  --begin <begin_datetime> --end <end_datetime>

=head1 DESCRIPTION

octo_extractor is the program used by the Octopussy Project to extract Logs

=cut

use strict;
no strict 'refs';

use Getopt::Long;
Getopt::Long::Configure('bundling');

use Octopussy;

my $PROG_NAME = "octo_extractor";
my $PROG_VERSION = Octopussy::Version();

my $help;
my (@devices, @services) = ((), ());
my ($taxonomy, $begin, $end);

=head1 FUNCTIONS

=head2 String_List($fct, @args)

=cut
sub String_List
{
	my ($fct, @args) = @_;

	return (join(", ", &{$fct}(@args)));
}

=head2 Help()

=cut
sub Help()
{
	print "\n$PROG_NAME (version $PROG_VERSION)\n\n";		
	print	" Usage: $PROG_NAME --device <device> --service <service>";
	print " --taxonomy <taxonomy>";
	print " --begin <begin_datetime> --end <end_datetime>\n\n";

	if (! @devices)
		{ print "device list: " . String_List("Octopussy::Device::List") . "\n"; }
	elsif (! @services)
	{	
		my @servs = Octopussy::Device::Services(@devices);
		print "service list: " . join (", ", sort @servs) . "\n"; 
	}
	elsif (!defined $taxonomy)
		{ print "taxonomy list: " . String_List("Octopussy::Taxonomy::List_And_Any") . "\n"; }
	print "\n";

	exit();
}

=head2 Get_Messages_To_Parse($services, $taxonomy)

=cut
sub Get_Messages_To_Parse($$)
{
	my ($services, $taxonomy) = @_;
	
	my @msg_to_parse = Octopussy::Message::Parse_List($services, $taxonomy, 
		undef, undef, undef, undef);

	return (@msg_to_parse);
}

=head2 Get_TimePeriod_Files($devices, $services, $begin, $end)

=cut
sub Get_TimePeriod_Files($$$$)
{
	my ($devices, $services, $begin, $end) = @_;

	my ($y1, $m1, $d1, $hour1, $min1) = ($1, $2, $3, $4, $5)
		if ($begin =~ /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})$/);
	my ($y2, $m2, $d2, $hour2, $min2) = ($1, $2, $3, $4, $5)
	    if ($end =~ /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})$/);
	my %start = ( year => $y1, month => $m1, day => $d1,
		hour => $hour1, min => $min1 );
	my %finish = ( year => $y2, month => $m2, day => $d2,
		hour => $hour2, min => $min2 );
	my $files = Octopussy::Logs::Files($devices, $services, \%start, \%finish);

	return ($files);
}

=head2 Print_Logs($devices, $services, $taxonomy, $begin, $end)

=cut
sub Print_Logs($$$$$)
{
  my ($devices, $services, $taxonomy, $begin, $end) = @_;
	my $files = Get_TimePeriod_Files($devices, $services, $begin, $end);

	print "Nb Files: $#{$files}\n";
	if ((@{$services}[0] =~ /-ANY-/i) && ($taxonomy =~ /-ANY-/i))
	{
		foreach my $f (@{$files})
		{
			open(FILE, "zcat \"$f\" |");
			while (<FILE>)
			{
				print $_;
			}
			close(FILE);
		}
	}
	else
	{
		my @msg_to_parse = Get_Messages_To_Parse($services, $taxonomy);
		foreach my $f (@{$files})
  	{
			open(FILE, "zcat \"$f\" |");
			while (<FILE>)
			{
				my $line = $_;
				chomp($line);
				foreach my $msg (@msg_to_parse)
				{
					if (my (@args) = $line =~ $msg->{re})
					{
						print "$line\n";
						last;
					}
				}
			}
			close(FILE);
		}
	}
}

#
# MAIN
#

my $status = GetOptions(
		"h" => \$help, "help" => \$help,
   	"devices=s" => \@devices, "services=s" => \@services,
		"taxonomy=s" => \$taxonomy, "begin=s" => \$begin, "end=s" => \$end );

Help()	if ((! $status) || ($help) 
	|| (! @devices) || (! @services) || (!defined $begin) || (!defined $end));

Print_Logs(\@devices, \@services, $taxonomy, $begin, $end);

=head1 AUTHOR

Sebastien Thebert <octo.devel@gmail.com>

=head1 SEE ALSO

octo_dispatcher, octo_parser, octo_uparser, octo_reporter, octo_scheduler

=cut
