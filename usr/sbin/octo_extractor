#!/usr/bin/perl -w

=head1 NAME

octo_extractor - Octopussy Logs Extractor program

=head1 SYNOPSIS

octo_extractor --device <device> --service <service> --taxonomy <taxonomy>
  --begin YYYYMMDDHHMM --end YYYYMMDDHHMM 
	[ --include1 '<regexp to include>' ] [ --include2 '<regexp to include>' ]
  [ --exclude1 '<regexp to exclude>' ] [ --exclude2 '<regexp to exclude>' ]
	[ --pid_param <string> ] [ --output <outputfile> ]

=head1 DESCRIPTION

octo_extractor is the program used by the Octopussy Project to extract Logs

=cut

use strict;
no strict 'refs';

use Getopt::Long;
Getopt::Long::Configure('bundling');

use Octopussy;

my $PROG_NAME = "octo_extractor";
my $PROG_VERSION = Octopussy::Version();

my $help;
my (@devices, @services) = ((), ());
my ($taxonomy, $begin, $end, $pid_param, $output);
my ($progress_msg, $progress_num, $progress_match) = (0, 0, 0);
my ($include1, $include2, $exclude1, $exclude2);
my ($pid_file, $status_file) = (undef, undef);
my $dir_pid = Octopussy::Directory("running");

=head1 FUNCTIONS

=head2 String_List($fct, @args)

=cut

sub String_List
{
	my ($fct, @args) = @_;

	return (join(", ", &{$fct}(@args)));
}

=head2 Help()

=cut

sub Help()
{
my $help_str = <<EOF;

$PROG_NAME (version $PROG_VERSION)

 Usage: $PROG_NAME --device <device> --service <service> --taxonomy <taxonomy>
        --begin YYYYMMDDHHMM --end YYYYMMDDHHMM";
        [ --include1 '<regexp to include>' ] [ --include2 '<regexp to include>' ]
        [ --exclude1 '<regexp to exclude>' ] [ --exclude2 '<regexp to exclude>' ]
        [ --pid_param <string> ] [ --output <outputfile> ]

EOF

	print $help_str;
	if (! @devices)
	{ 
		print " device list: " . String_List("Octopussy::Device::List") . "\n"; 
	}
	elsif (! @services)
	{	
#		my @servs = Octopussy::Device::Services(@devices);
		print " service list: "
      . String_List("Octopussy::Device::Services", @devices) . "\n";
		#print " service list: " . join (", ", sort @servs) . "\n"; 
	}
	elsif (!defined $taxonomy)
	{ 
		print " taxonomy list: " 
			. String_List("Octopussy::Taxonomy::List_And_Any") . "\n"; 
	}
	print "\n";

	exit();
}

=head2 Progress($msg, $num, $nb_match)

=cut

sub Progress
{
  my ($msg, $num, $nb_match) = @_;

  if (defined $num)
  { 
		($progress_msg, $progress_num, $progress_match) = ($msg, $num, $nb_match);
	}
  else
  { # kill -USR1 --> write current progress in status file
    open(STATUS_FILE, "> $status_file");
    print STATUS_FILE AAT::Translation($progress_msg) . " [$progress_num] [$progress_match]\n";
    close(STATUS_FILE);
  }
}

=head2 Get_Messages_To_Parse($services, $taxonomy)

=cut

sub Get_Messages_To_Parse($$)
{
	my ($services, $taxonomy) = @_;
	
	my @msg_to_parse = Octopussy::Message::Parse_List($services, $taxonomy, 
		undef, undef, undef, undef);

	return (@msg_to_parse);
}

=head2 Get_TimePeriod_Files($devices, $services, $begin, $end)

=cut

sub Get_TimePeriod_Files($$$$)
{
	my ($devices, $services, $begin, $end) = @_;

	my ($y1, $m1, $d1, $hour1, $min1) = ($1, $2, $3, $4, $5)
		if ($begin =~ /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})$/);
	my ($y2, $m2, $d2, $hour2, $min2) = ($1, $2, $3, $4, $5)
	    if ($end =~ /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})$/);
	my %start = ( year => $y1, month => $m1, day => $d1,
		hour => $hour1, min => $min1 );
	my %finish = ( year => $y2, month => $m2, day => $d2,
		hour => $hour2, min => $min2 );
	my $files = Octopussy::Logs::Files($devices, $services, \%start, \%finish);

	return ($files);
}

=head2 Print_Logs($devices, $services, $taxonomy, $begin, $end, $re_incl, $re_excl)

=cut

sub Print_Logs($$$$$$$)
{
  my ($devices, $services, $taxonomy, $begin, $end, $re_incl, $re_excl) = @_;
	my $time = time();
	my @lines = ();
	my @includes = ();
  my @excludes = ();
  foreach my $inc (AAT::ARRAY($re_incl))
    { push(@includes, qr/$inc/) if (AAT::NOT_NULL($inc)); }
  foreach my $excl (AAT::ARRAY($re_excl))
    { push(@excludes, qr/$excl/) if (AAT::NOT_NULL($excl)); }
	
	Progress("_MSG_EXTRACT_PROGRESS_LISTING_FILES", "1/1", 0);
	my $files = Get_TimePeriod_Files($devices, $services, $begin, $end);
	my $total = $#{$files} + 1;
	my $nb_match = 0;

	my %logs = ();
  my ($year, $month);

	if ((@{$services}[0] =~ /-ANY-/i) && ($taxonomy =~ /-ANY-/i))
	{
		my $i = 1;
		foreach my $f (@{$files})
		{
			Progress("_MSG_EXTRACT_PROGRESS_DATA", $i . "/$total", $nb_match);
			($year, $month) = ($1, $2)  if ($f =~ /(\d{4})\/(\d{2})\/\d{2}\/msg_/);
			open(FILE, "zcat \"$f\" |");
			while (<FILE>)
			{
				my $line = $_;
				my $match = 1;
      	foreach my $inc (@includes)
        	{ $match = 0  if ($line !~ $inc); }
      	foreach my $excl (@excludes)
        	{ $match = 0  if ($line =~ $excl); }
      	if ($match) 
				{
					push(@{$logs{"$year$month"}}, $line);
					$nb_match++;
				}
			}
			close(FILE);
			$i++;
		}
	}
	else
	{
		my $i = 1;
		my @msg_to_parse = Get_Messages_To_Parse($services, $taxonomy);
		foreach my $f (@{$files})
  	{
			Progress("_MSG_EXTRACT_PROGRESS_DATA", $i . "/$total", $nb_match);
			($year, $month) = ($1, $2)  if ($f =~ /(\d{4})\/(\d{2})\/\d{2}\/msg_/);
			open(FILE, "zcat \"$f\" |");
			while (<FILE>)
			{
				my $line = $_;
				foreach my $msg (@msg_to_parse)
				{
					if ($line =~ $msg->{re})
					{
						my $match = 1;
		        foreach my $inc (@includes)
    		      { $match = 0  if ($line !~ $inc); }
        		foreach my $excl (@excludes)
          		{ $match = 0  if ($line =~ $excl); }
						if ($match)
        		{
							push(@{$logs{"$year$month"}}, $line);
          		$nb_match++;
        		}
						last;
					}
				}
			}
			close(FILE);
			$i++;
		}
	}
	if (AAT::NOT_NULL($output))
  { 
		open(OUT, "> $output"); 
		foreach my $k (sort keys %logs)
  	{
			foreach my $l (sort @{$logs{$k}})
				{ print OUT $l; }
		}
		close(OUT);
	}
  else
  {
		foreach my $k (sort keys %logs)
    { 
			foreach my $l (sort @{$logs{$k}})
    		{ print $l; }
		}
	}
	
	AAT::Syslog("octo_extractor", "LOG_SEARCH", join(",", @{$devices}),
  	join(",", @{$services}), "${begin}-${end}", time() - $time);
}

=head2 End()

=cut

sub End
{
  AAT::Syslog($PROG_NAME, "Logs Extraction Aborted !");
  unlink($pid_file);
  unlink($status_file);
  exit();
}

#
# MAIN
#

my $status = GetOptions(
	"h" => \$help, "help" => \$help,
	"devices=s" => \@devices, "services=s" => \@services, 
	"taxonomy=s" => \$taxonomy, "begin=s" => \$begin, "end=s" => \$end, 
	"include1=s" => \$include1, "include2=s" => \$include2,
	"exclude1=s" => \$exclude1, "exclude2=s" => \$exclude2,
	"pid_param=s" => \$pid_param, "output=s" => \$output );

Help()	if ((! $status) || ($help) 
	|| (! @devices) || (! @services) || (!defined $begin) || (!defined $end));

print @devices;
print @services;

my $pid_name = $PROG_NAME . (defined $pid_param ?"_$pid_param" : "");
$pid_file = Octopussy::PID_File($pid_name);
$status_file = "${dir_pid}${PROG_NAME}" 
	. (defined $pid_param ?"_$pid_param" : "") . ".status";

$SIG{USR1} = \&Progress;
$SIG{USR2} = \&End;

Print_Logs(\@devices, \@services, $taxonomy, $begin, $end, 
	[$include1, $include2], [$exclude1, $exclude2]);

unlink($pid_file);
unlink($status_file);

=head1 AUTHOR

Sebastien Thebert <octo.devel@gmail.com>

=head1 SEE ALSO

octo_dispatcher, octo_parser, octo_uparser, octo_reporter, octo_scheduler

=cut
