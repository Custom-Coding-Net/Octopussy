#!/usr/bin/perl -w
=head1 NAME

octo_dispatcher - Octopussy Dispatcher program

=head1 DESCRIPTION

octo_dispatcher is the program used by the Octopussy Projec
to receive syslog lines and dispatche into device directories

(syslog --> <device>/YYYY/MM/DD/Incoming)

=cut
use strict; 

use File::Copy;
use AAT;
use Octopussy;

use constant PROG_NAME => "octo_dispatcher";

my $cache = Octopussy::Cache::Init("octo_dispatcher");

my %dir_device;
my %device_type;

=head1 FUNCTIONS

=head2 Init()

Inits Dispatcher

=cut
sub Init()
{
	%dir_device = ();
	%device_type = ();
	AAT::Syslog(PROG_NAME, "LOAD_DEVICES_CONFIG");
	foreach my $d (Octopussy::Device::Configurations("name"))
	{
  	my $type = $d->{type};
  	$type =~ s/ /_/g;
		my $status = (defined $d->{status} ? $d->{status} : "Paused");
		$device_type{$d->{name}} = ($status ne "Stopped" ? $type : "");
		$dir_device{$d->{name}} = 
			Octopussy::Storage::Directory_Incoming($d->{name});
	}		
	Octopussy::RRDTool::Syslog_By_DeviceType_Init();
}

=head2 Handle_Dir($device, $day, $month, $year)

Handles directory

=cut
sub Handle_Dir($$$$)
{
	my ($device, $day, $month, $year) = @_;

	if (!defined $dir_device{$device})
	{
  	if (!-f Octopussy::Device::Filename($device))
  	{
    	Octopussy::Device::New({ name => $device, address => $device,
      	description => "New Device !" });
    	$dir_device{$device} = Octopussy::Storage::Directory_Incoming($device);
  	}
	}
  my $dir_incoming = "$dir_device{$device}/$device/Incoming/$year/$month/$day";
	Octopussy::Create_Directory($dir_incoming);

	return ($dir_incoming);
}

#
# MAIN
#

my %logs;
my %dtype_stats = ();
my %nb_events = ();
my ($device, $line) = (undef, undef);
my ($year, $month, $mday, $hour, $min, $sec) = AAT::Datetime::Now();
my ($n_year, $n_month, $n_mday, $n_hour, $n_min, $n_sec) = AAT::Datetime::Now();

$SIG{HUP} = \&Init;
Octopussy::PID_File(PROG_NAME);
AAT::Syslog(PROG_NAME, "PROGRAM_START");
Init();
while (<>)
{
	$line = $_;
	chomp($line);
	$line =~ s/^<\d+>//;
	if ($line =~ /^\w{3} \s?\d{1,2} \d\d:\d\d:\d\d (\S+)/)
	{
		$device = $1;
		($n_year, $n_month, $n_mday, $n_hour, $n_min, $n_sec) = AAT::Datetime::Now();
		if ((int($n_sec/10) != int($sec/10)) || ($n_min != $min) 
			|| ($n_hour != $hour) || ($n_mday != $mday) || ($n_month != $month))
		{
			my $mod = (int($n_sec/10)*10);
			foreach my $device (keys %logs)
      {
				my $dir = Handle_Dir($device, $mday, $month, $year);
				my $file = "$dir/msg_${hour}h${n_min}_$mod.log";
				my $i = 0;
				if (defined open(FILE, ">> $file"))
				{
					foreach my $l (@{$logs{$device}})
						{ print FILE "$l\n"; $i++; }
					close(FILE);
					$nb_events{$device} += $i;
					$dtype_stats{$device_type{$device}} += $i;
					Octopussy::Chown($file);
				}
				else
      	{
        	print "Unable to open file '$file'\n";
        	AAT::Syslog("octo_dispatcher", "UNABLE_OPEN_FILE", $file);
      	}
				delete $logs{$device};
			}
			if (($n_min != $min) || ($n_hour != $hour) || ($n_mday != $mday)
      	|| ($n_month != $month)) # not the same minute than last minute
			{
				my @syslogs = ();
        my $total = 0;
				foreach my $k (sort keys %nb_events)
    		{ 
          push(@syslogs, "Device: $k - Events: $nb_events{$k}"); 
          $total += $nb_events{$k};
        }
				AAT::Syslog::Messages(PROG_NAME, \@syslogs);
				$cache->set("dispatcher_stats_datetime", "$year$month$mday$hour$min");
        $cache->set("dispatcher_stats_devices", \%nb_events);
				$cache->set("dispatcher_stats_devicetypes", \%dtype_stats);
        
        my $nb = $cache->get("dispatcher_stats_hourly_$year$month$mday$hour");
        $nb = (AAT::NOT_NULL($nb) ? $nb + $total : $total); 
        $cache->set("dispatcher_stats_hourly_$year$month$mday$hour", $nb);
				
        %dtype_stats = ();
				%nb_events = ();
				($year, $month, $mday, $hour, $min) =
        	($n_year, $n_month, $n_mday, $n_hour, $n_min);
			}
			$sec = $n_sec;
		}
		push(@{$logs{$device}}, $line)	
			if ((!defined $device_type{$device}) || ($device_type{$device} ne ""));
	}
}

=head1 AUTHOR

Sebastien Thebert <octo.devel@gmail.com>

=head1 SEE ALSO

octo_extractor, octo_parser, octo_uparser, octo_reporter, octo_rrd, 
octo_scheduler

=cut
